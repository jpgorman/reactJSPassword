/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 60px;
$gutter-width: 30px;
$nogutter-width: 0px;
$columns: 12;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns:$columns) {
  @return ($column-width * $columns) + ($gutter-width * $columns);
}

@function gridsystem-width-nogutter($columns:$columns) {
  @return ($column-width * $columns) + ($nogutter-width * $columns);
}

@function gutter($count:0, $factor:1){
  @return ($count * $gutter-width) * $factor; 
}

@function push-gutter($count){
  @return gutter($count, 1);
}
@function pull-gutter($count){
  @return gutter($count, -1);
}

// Set $total-width to 100% for a fluid layout
//$total-width: gridsystem-width-nogutter($columns);

$total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}


//////////
// GRID //
//////////

body {
	width: 100%;
	@include clearfix();
}

@mixin row($columns:$columns) {
  display: block;
  width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
  margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
  // *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
  // *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
  @include clearfix();
}
@mixin column($x,$columns:$columns) {
  display: inline-block;
  float: left;
  width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
  margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
  // *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
  // *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}

@mixin row-no-gutter($columns:$columns) {
	display: block;
	width: $total-width*(($nogutter-width + gridsystem-width-nogutter($columns))/gridsystem-width-nogutter($columns));
	margin: 0 $total-width*((($nogutter-width*.5)/gridsystem-width-nogutter($columns))*-1);
	// *width: $total-width*(($nogutter-width + gridsystem-width-nogutter($columns))/gridsystem-width-nogutter($columns))-$correction;
	// *margin: 0 $total-width*((($nogutter-width*.5)/gridsystem-width-nogutter($columns))*-1)-$correction;
	@include clearfix();
}
@mixin column-no-gutter($x,$columns:$columns) {
	display: inline-block;
	float: left;
	width: $total-width*(((($nogutter-width+$column-width)*$x)-$nogutter-width) / gridsystem-width-nogutter($columns));
	margin: 0 $total-width*(($nogutter-width*.5)/gridsystem-width-nogutter($columns));
	// *width: $total-width*(((($nogutter-width+$column-width)*$x)-$nogutter-width) / gridsystem-width-nogutter($columns))-$correction;
	// *margin: 0 $total-width*(($nogutter-width*.5)/gridsystem-width-nogutter($columns))-$correction;
}
@mixin push($offset:1) {
	margin-left: $total-width*((($nogutter-width+$column-width)*$offset) / gridsystem-width-nogutter($columns)) + $total-width*(($nogutter-width*.5)/gridsystem-width-nogutter($columns));
}
@mixin pull($offset:1) {
	margin-right: $total-width*((($nogutter-width+$column-width)*$offset) / gridsystem-width-nogutter($columns)) + $total-width*(($nogutter-width*.5)/gridsystem-width-nogutter($columns));
}
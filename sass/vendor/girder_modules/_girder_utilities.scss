//////////////////////////////
// Utility Mixins and classes

// Clear magic, in mixin and extender flavors
// Usage: @include clearfix; or @extend clear;
@mixin clearfix() {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
  // Old IE
  *zoom:1;
}

%clear {
  &:before,
  &:after {
    content:"";
    display:table;
  }
  &:after {
    clear:both;
  }
}

// Return rem units with pixel fallback
// This takes an rem value (just a number)
// Returns a pixel fall back based on our $em-base
// Usage: @include font-size(2);
@mixin font-size($sizeValue: 1.8) {
  $size: strip-unit($sizeValue);
  font-size: ($size * $em-base);
  font-size: $size + rem;
}

// Modified the Excellent Panels Mixin from Zurb
// -----------------------------------------------
// Might surface these vars in the future but keeping settings simple for now
// Control the background and border styles
$panel-bg:              darken(#fff, 7%) !default;
$panel-border-color:    darken($panel-bg, 15%) !default;
// Set default inner padding and bottom margin
$panel-margin-bottom:   0 !default;
$panel-padding:         emCalc(20px) !default;
// Set default font colors
$panel-font-color:      #333 !default;
$panel-font-color-alt:  #fff !default;
// Panel Mixin
@mixin panel($bg:$panel-bg, $padding:$panel-padding, $filler:false) {

  text-align: center;
  font-size: .6em;
  border-radius: 3px;

  @if $bg {
    $bg-lightness: lightness($bg);

    border-style: solid;
    border-width: 1px;
    border-color: darken($bg, 15%);
    margin-bottom: $panel-margin-bottom;
    margin-top: 0;
    padding: $padding $padding / 2;
    background: $bg;

    // We set the font color based on the darkness of the bg and if we are using filler content
    @if $bg-lightness >= 50% and $filler == true        { h1,h2,h3,h4,p { color: $panel-font-color-alt; } }
    @else if $bg-lightness >= 50% and $filler == true   { h1,h2,h3,h4,p { color: $panel-font-color; } }
    @else if $filler == true {
      h1,h2,h3,h4,p { color: $panel-font-color-alt;
      line-height: 1; margin-bottom: emCalc(20px) / 2;
      }
    }
    // Respect the padding, fool.
    // &>:first-child { padding-top: 0; }
    // &>:last-child { padding-bottom: 0; }
  }
}

// Basic Mixin for text alignments
// Usage: @include text-align(right);
@mixin text-align($direction) {
  @if $direction == left {
    text-align: #{$direction};
  }
  @else if $direction == right {
    text-align: #{$direction};
  }
  @else if $direction == center {
    text-align: #{$direction};
  }
  @else if $direction == justify {
    text-align: #{$direction};
  }
  @else {
    @warn '"#{$direction}" is not a valid alignment for the text-align() mixin.';
  }
}

// Only include utility classes if setting is set to true
// Useful for classes in your HTML like: <p class="right text-right">Go Right!</h2>
@if $html-classes == true or $include-extras == true {
  // Utility classes for presentational markup
  .left         { float: left; margin-right: .8em; }
  .right        { float: right; margin-left: .8em; }
  .hidden         { display: none !important; visibility: hidden; }
  // Write out classes for text-alignment
  @each $direction in left, right, center, justify {
    .text-#{$direction} {text-align: #{$direction};}
  }
  .clear {
    &:before, &:after { content:""; display:table; }
    &:after {clear:both;}
  }
}

// Mixin to show a baseline grid (Via Google Kit)
// only visible when body has 'debug' class
@mixin baseline-grid() {
  position: relative;

  &:after {
    display: none;
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    z-index: 9;

    // display: none;
    background-image: -moz-linear-gradient(top, rgba(0,0,0,0) 95%, rgba(0,0,0,0.15) 100%);
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(95%,rgba(0,0,0,0)), color-stop(100%,rgba(0,0,0,0.15)));
    background-image: -webkit-linear-gradient(top, rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
    background-image: -o-linear-gradient(top, rgba(0,0,0,0) 95%, rgba(0,0,0,0.15) 100%);
    background-image: -ms-linear-gradient(top, rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
    background-image: linear-gradient(top, rgba(0,0,0,0.15) 95%,rgba(0,0,0,0.15) 100%);

    @include prefix(background-size, 100% 26px);
  }

  .debug &:after {
    display: block;
    pointer-events: none;
  }
}

// Manual prefixing of a property of your choice
// Covers *most* practical uses.
@mixin prefix($property,$value) {
  $isTransform: nth($value, 1);
  @if $property == transition and $isTransform == transform {
  -webkit-#{$property}: -webkit-#{$value};
     -moz-#{$property}: -moz-#{$value};
      -ms-#{$property}: -ms-#{$value};
  }
  @else {
  -webkit-#{$property}: $value;
     -moz-#{$property}: $value;
      -ms-#{$property}: $value;
  }
  #{$property}: $value;
}

// Layout and Flex utilities
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex($values...) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}
@mixin flexorder($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}


// ---- Media Query Helpers
// ---------------------------------
// A Basic Media Query Mixin
// Defaults to: 'min-width'. Pass a second value for min and max query.
// @include media-query(600px, max-width) {
//   font-size: 2.4em;
// }
@mixin media-query ($breakpoint-size, $breakpoint-max:"") {
  @if $breakpoint-max != "" and type-of($breakpoint-max) == 'number' {
    @media only screen and (min-width:$breakpoint-size) and (max-width: $breakpoint-max) { @content; }
  }
  @else if $breakpoint-max != "" and type-of($breakpoint-max) == 'string' {
    @if $breakpoint-max == "max-width" {
      @media only screen and (max-width: $breakpoint-size) { @content; }
    } @else {
      @warn "Your second argument for the media query mixin is invalid. It accepts the string 'max-width' or a number value like '600px' (optional)."
    }
  }
  @else {
    @media only screen and (min-width: $breakpoint-size) { @content; }
  }
}

// --- max-width only
@mixin max-width($breakpoint-size) {
  @include media-query ($breakpoint-size, "max-width") {
    @content;
  }
}

// --- min-width and max-width only
@mixin min-max($breakpoint-size-min, $breakpoint-size-max) {
  @include media-query ($breakpoint-size-min, $breakpoint-size-max) {
    @if type-of($breakpoint-size-max) == 'number' {
      @content;
    } @else {
      @warn "Your second argument for the min-max mixin is invalid. It needs a number value for this type of media query (like '600px')."
    }
  }
}

// --- ipad-retina (Optional: specify orientation)
@mixin ipad-retina($orientation: all) {
  $deviceMinWidth: 768px;
  $deviceMaxWidth: 1024px;
  $devicePixelRatio: 2;

  @if $orientation == all {
    @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) {
      @content;
    }
  }
  @else {
    @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (orientation:#{$orientation}) {
      @content;
    }
  }
}

// ---- Girder Box-Sizing
// ---------------------------------
// This is required for grid units to work using padded gutters.
// TODO: Option to remove this if its already included in a project
// Override for special cases when selectors need other types of box-sizing or scope this selector to your grid wrappers if preferred.
*, *:before, *:after {
  @include prefix(box-sizing, border-box);
}

